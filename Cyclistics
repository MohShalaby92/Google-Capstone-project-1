# # # # # # # # # # # # # # # # # # # # # # # 
# Install required packages
# tidyverse for data import and wrangling
# libridate for date functions
# ggplot for visualization
# # # # # # # # # # # # # # # # # # # # # # #  

library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data

# Use Cyclistic’s historical trip data to analyze and identify trends. Download the previous 12 months of Cyclistic trip data 
here <https://divvy-tripdata.s3.amazonaws.com/index.html>

<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202111-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202112-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202201-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202201-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202202-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202203-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202204-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202205-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202206-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202207-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202208-divvy-tripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202209-divvy-publictripdata.csv")
<- read.csv("E:/portofolio/Google Data Analysis Coursera/capstone case study/scenario#1/V2/202210-divvy-tripdata.csv")

# We need to combine all Datasets into one using rbind() into a new data set " All_trips"
All_trips <- rbind(`202111.divvy.tripdata`,`202112.divvy.tripdata`,`202201.divvy.tripdata`,`202202.divvy.tripdata`,`202203.divvy.tripdata`,`202204.divvy.tripdata`,`202205.divvy.tripdata`,`202206.divvy.tripdata`,`202207.divvy.tripdata`,`202208.divvy.tripdata`,`202209.divvy.publictripdata`,`202210.divvy.tripdata`)

# Remove the following variables (columns) that were not needed for the analysis: “start_lat”, “start_lng”, “end_lat”, and “end_lng”.
all_trips_data <- subset(All_trips, select = -c(start_lat, start_lng, end_lat, end_lng ))

colnames(all_trips_data)  #List of column names

## [1] "ride_id"            "rideable_type"      "started_at"        
## [4] "ended_at"           "start_station_name" "start_station_id"  
## [7] "end_station_name"   "end_station_id"     "member_casual"

# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... 
# before completing these operations we could only aggregate at the ride level

all_trips_data$date <- as.Date(all_trips_data$ format="%d/%m/%Y") 

all_trips_data$date <- as.Date(all_trips_data$started_at)
all_trips_data$month <- format(as.Date(all_trips_data$date), "%m")
all_trips_data$day <- format(as.Date(all_trips_data$date), "%d")
all_trips_data$year <- format(as.Date(all_trips_data$date), "%Y")
all_trips_data$day_of_week <- format(as.Date(all_trips_data$date), "%A")

# Add a "ride_length" calculation to all_trips (in seconds)

all_trips_data$ride_length <- difftime(all_trips_data$ended_at,all_trips_data$started_at)

# Inspect the structure of the columns

str(all_trips_data)

# Convert "ride_length" from Factor to numeric so we can run calculations on the data

is.factor(all_trips_data$ride_length)
all_trips_data$ride_length <- as.numeric(as.character(all_trips_data$ride_length))
is.numeric(all_trips_data$ride_length)

# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed

all_trips_v2 <- all_trips_data[!(all_trips_data$start_station_name == "HQ QR" | all_trips_data$ride_length<0),]

# Descriptive analysis on ride_length
mean(all_trips_v2$ride_length)
max(all_trips_v2$ride_length)
min(all_trips_v2$ride_length)    

# can also be done using summary

summary(all_trips_v2$ride_length)

# Compare members and casual users

aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# numbers show pattern of much longer rides for casual users

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Now, let's run the average ride time by each day for members vs casual users

aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

library(lubridate)

# analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>%
  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>%
  arrange(member_casual, weekday)

# visualize the number of rides by rider type

ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")            

# create a visualization for average duration

all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")
